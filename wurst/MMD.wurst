///////////////////////////////////////////////////////////////
/// The Map Meta Data Package
/// Version: v1.00       
/// Last Modified: April 24, 2009
/// Author Chain: Strilanc, [insert next ...]
///////////////////////////////////////////////////////////////
/// This package is used to emit standardized meta data which parsers and bot hosts can use to record relevant
/// game statistics like "hero kills" which would otherwise be impossible to record automatically.
///
/// In particular, the flag function can be used to indicate if a leaver should be awarded a win or not. Replays
/// don't contain enough information to easily tell winners who leave from losers who leave. (for example: people
/// who leave while end-game stats are being shown)
///////////////////////////////////////////////////////////////
/// Interface:
///   void flagPlayer(player, flag_constant)
///   void defineValue(name, type_constant, goal_constant, suggest_constant)
///   void updateValueInt(name, player, operation_constant, value)
///   void updateValueReal(name, player, operation_constant, value)
///   void updateValueString(name, player, value)
///   void defineEvent0(name, format) /////////////////////////

package MMD
import ClosureTimers

public constant integer GOAL_NONE = 101
public constant integer GOAL_HIGH = 102
public constant integer GOAL_LOW = 103

public constant integer TYPE_STRING = 101
public constant integer TYPE_REAL = 102
public constant integer TYPE_INT = 103

public constant integer OP_ADD = 101
public constant integer OP_SUB = 102
public constant integer OP_SET = 103

public constant integer SUGGEST_NONE = 101
public constant integer SUGGEST_TRACK = 102
public constant integer SUGGEST_LEADERBOARD = 103

public constant integer FLAG_DRAWER = 101
public constant integer FLAG_LOSER = 102
public constant integer FLAG_WINNER = 103
public constant integer FLAG_LEAVER = 104
public constant integer FLAG_PRACTICING = 105

@configurable public constant bool SHOW_DEBUG_MESSAGES = true

constant string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-+= \\!@#$%^&*()/?>.<,;:'\"{}[]|`~"
constant integer num_chars = StringLength(chars)
string array flags
string array goals
string array ops
string array types
string array suggestions
boolean initialized = false
        
gamecache gc = null
constant string ESCAPED_CHARS = " \\"

constant integer CURRENT_VERSION = 1
constant integer MINIMUM_PARSER_VERSION = 1
constant string FILENAME = "MMD.Dat"
constant string M_KEY_VAL = "val:"
constant string M_KEY_CHK = "chk:"
constant integer NUM_SENDERS_NAIVE = 1
constant integer NUM_SENDERS_SAFE = 3
integer num_senders = NUM_SENDERS_NAIVE
integer num_msg = 0        

timer clock = CreateTimer()
string array q_msg
real array q_time
integer array q_index
QueueNode q_head = null
QueueNode q_tail = null

/**Triggered when tampering is detected. Increases the number of safeguards against tampering.*/
public function raiseGuard(string reason)
  if (SHOW_DEBUG_MESSAGES)
    BJDebugMsg("MMD: Guard Raised! (" + reason + ")")
  num_senders = NUM_SENDERS_SAFE //increase number of players voting on each message

/**Returns seconds elapsed in game time*/
function time() returns real
  return clock.getElapsed()

/**Initializes the char-to-int conversion*/
function prepC2I()
  for i = 0 to num_chars-1
    var id = SubString(chars, i, i+1)
    if (id == StringCase(id, true))
      id += "U"
    StoreInteger(gc, "c2i", id, i)

/**Converts a character to an integer*/
function c2i(string c) returns int
  var id = c
  if id == StringCase(id, true)
    id = id + "U"
  var i = GetStoredInteger(gc, "c2i", id)
  if (i < 0 or i >= num_chars or SubString(chars, i, i+1) != c) and HaveStoredInteger(gc, "c2i", id)
    //A cheater sent a fake sync to screw with the cached values
    while (i < num_chars)
      if c == SubString(chars, i, i+1) //cheating!
        raiseGuard("c2i poisoned")
        StoreInteger(gc, "c2i", id, i)
        break
      i++
  return i

/**Computes a weak hash value, hopefully secure enough for our purposes*/
function poorHash(string s, integer seed) returns int
  let n = StringLength(s)
  var m = n + seed
  for i = 0 to n-1
    m = m * 41 + c2i(SubString(s, i, i+1))
  return m

/**Stores previously sent messages for tamper detection purposes*/
class QueueNode
  real timeout = 0.0
  string msg = ""
  int checksum = 0
  string key = ""
  QueueNode next = null
  
  construct(integer id, string msg)
    this.timeout = time() + 7.0 + GetRandomReal(0, 2+0.1*GetPlayerId(GetLocalPlayer()))
    this.msg = msg
    this.checksum = poorHash(msg, id)
    this.key = id.toString()

  ondestroy
    gc.flushInt(M_KEY_VAL + key, msg)
    gc.flushInt(M_KEY_CHK + key, key)
    this.msg = null
    this.key = null
    this.next = null

  function send()
    gc.saveInt(M_KEY_VAL + key, msg, checksum)
    gc.saveInt(M_KEY_CHK + key, key, checksum)
    SyncStoredInteger(gc, M_KEY_VAL + key, msg)
    SyncStoredInteger(gc, M_KEY_CHK + key, key)

/**Returns true for a fixed size uniform random subof players in the game*/
function isEmitter() returns bool
  var n = 0
  int array picks
  bool array pick_flags
  for i = 0 to 23
    if GetPlayerController(Player(i)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING
      if n < num_senders //initializing picks
        picks[n] = i
        pick_flags[i] = true
      else //maintain the invariant 'P(being picked) = c/n'
        let r = GetRandomInt(0, n)
        if r < num_senders
          pick_flags[picks[r]] = false
          picks[r] = i
          pick_flags[i] = true
      n++
  return pick_flags[GetPlayerId(GetLocalPlayer())]

/**Places meta-data in the replay and in network traffic*/
function emit(string message)
  if (not initialized)
    BJDebugMsg("MMD Emit Error: Library not initialized yet.")
    return

  //remember sent messages for tamper check
  let q = new QueueNode(num_msg, message)
  if q_head == null
    q_head = q
  else
    q_tail.next = q
  q_tail = q
          
  //send new message
  num_msg = num_msg + 1
  if isEmitter()
    q.send()

/**Performs tamper checks*/
function tick()
    
  //check previously sent messages for tampering
  var q = q_head

  while (q != null and q.timeout < time())
    if not HaveStoredInteger(gc, M_KEY_VAL+q.key, q.msg)
      raiseGuard("message skipping")
      q.send()
    else if not HaveStoredInteger(gc, M_KEY_CHK+q.key, q.key)
      raiseGuard("checksum skipping")
      q.send()
    else if GetStoredInteger(gc, M_KEY_VAL+q.key, q.msg) != q.checksum
      raiseGuard("message tampering")
      q.send()
    else if GetStoredInteger(gc, M_KEY_CHK+q.key, q.key) != q.checksum
      raiseGuard("checksum tampering")
      q.send()
    q_head = q.next
    destroy q
    q = q_head

  if q_head == null
    q_tail = null
  
  //check for future message tampering
  for i = 0 to 9
    if (not HaveStoredInteger(gc, M_KEY_CHK + num_msg.toString(), num_msg.toString()))
      break
    raiseGuard("message insertion")
    emit("Blank")
    
/**Replaces control characters with escape sequences*/
function pack(string value) returns string
  var result = ""
  let valueLen = value.length()
  let escapedCharsLen = ESCAPED_CHARS.length()  
  //for each character in argument string
  for i = 0 to valueLen-1
    var c = SubString(value, i, i+1)
    //for each character in escaped chars string
    for j = 0 to escapedCharsLen-1
      //escape control characters
      if (c == SubString(ESCAPED_CHARS, j, j+1))
        c = "\\" + c
        break
    result += c    
  return result
    
/**Updates the value of a defined variable for a given player*/
function update_value(string name, player p, string op, string value, integer val_type)
  let id = GetPlayerId(p)
  if p == null or id < 0 or id >= 24
    //BJDebugMsg("MMD Set Error: Invalid player. Must be P1 to P24.")
    skip
  else if val_type != GetStoredInteger(gc, "types", name)
    BJDebugMsg("MMD Set Error: Updated value of undefined variable or used value of incorrect type.")
  else if StringLength(op) == 0
    BJDebugMsg("MMD Set Error: Unrecognized operation type.")        
  else if StringLength(name) > 50
    BJDebugMsg("MMD Set Error: Variable name is too long.")
  else if StringLength(name) == 0
    BJDebugMsg("MMD Set Error: Variable name is empty.")
  else
    //BJDebugMsg ("MMD Update: [name: " + name + "] [pid: " + I2S (GetPlayerId (p)) + "] [op: " + op + "] [value: " + value + "] [val_type: " + I2S (val_type) + "]")
    emit("VarP " + I2S(id) + " " + pack(name) + " " + op + " " + value)

/**Defines an event's arguments and format*/
function defineEvent(string name, integer num_args, string format, string arg_data)
  if GetStoredInteger(gc, "events", name) != 0
    BJDebugMsg("MMD DefEvent Error: Event redefined.")
  else
    StoreInteger(gc, "events", name, num_args+1)
    emit("DefEvent " + pack(name) + " " + I2S(num_args) + " " + arg_data + pack(format))
    
/**Places an event in the meta-data*/
function logEvent(string name, integer num_args, string data)
  if GetStoredInteger(gc, "events", name) != num_args+1
    BJDebugMsg("MMD logEvent Error: Event not defined or defined with different # of args.")
  else
    emit("Event " + pack(name) + data)

///////////////////////////////////////////////////////////////
/// Public functions
///////////////////////////////////////////////////////////////

/**Sets a player flag like "win_on_leave"*/
public function flagPlayer(player p, integer flag_type)
  let flag = flags[flag_type]
  let id = GetPlayerId(p)
  if p == null or id < 0 or id >= 24
    BJDebugMsg("MMD Flag Error: Invalid player. Must be P1 to P24.")
  else if StringLength(flag) == 0
    BJDebugMsg("MMD Flag Error: Unrecognized flag type.")
  else if GetPlayerController(Player(id)) == MAP_CONTROL_USER
    emit("FlagP " + I2S(id) + " " + flag)

/**Defines a variable to store things in*/
public function defineValue(string name, integer value_type, integer goal_type, integer suggestion_type)
  let goal = goals[goal_type]
  let vtype = types[value_type]
  let stype = suggestions[suggestion_type]
  if goal == null
    BJDebugMsg("MMD Def Error: Unrecognized goal type.")
  else if vtype == null
    BJDebugMsg("MMD Def Error: Unrecognized value type.")
  else if stype == null
    BJDebugMsg("Stats Def Error: Unrecognized suggestion type.")
  else if StringLength(name) > 32
    BJDebugMsg("MMD Def Error: Variable name is too long.")
  else if StringLength(name) == 0
    BJDebugMsg("MMD Def Error: Variable name is empty.")
  else if value_type == TYPE_STRING and goal_type != GOAL_NONE
    BJDebugMsg("MMD Def Error: Strings must have goal type of none.")
  else if GetStoredInteger(gc, "types", name) != 0
    BJDebugMsg("MMD Def Error: Value redefined.")
  else
    StoreInteger(gc, "types", name, value_type)
    emit("DefVarP " + pack(name) + " " + vtype + " " + goal + " " + stype)

/**Updates the value of an integer variable*/
public function updateValue(string name, player p, integer op, integer value)
  update_value(name, p, ops[op], I2S(value), TYPE_INT)
    
/**Updates the value of a real variable*/
public function updateValue(string name, player p, integer op, real value)
  update_value(name, p, ops[op], R2S(value), TYPE_REAL)

/**Updates the value of a string variable*/
public function updateValue(string name, player p, string value)
  let q = "\""
  update_value(name, p, ops[OP_SET], q + pack(value) + q, TYPE_STRING)

public function defineEvent(string name, string format)
  defineEvent(name, 0, format, "")

public function defineEvent(string name, string format, string argName0)
  defineEvent(name, 1, format, pack(argName0) + " ")

public function defineEvent(string name, string format, string argName0, string argName1)
  defineEvent(name, 2, format, pack(argName0) + " " + pack(argName1) + " ")

public function defineEvent(string name, string format, string argName0, string argName1, string argName2)
  defineEvent(name, 3, format, pack(argName0) + " " + pack(argName1) + " " + pack(argName2) + " ")

public function logEvent(string name)
  logEvent(name, 0, "")

public function logEvent(string name, string arg0)
  logEvent(name, 1, " " + pack(arg0))

public function logEvent(string name, string arg0, string arg1)
  logEvent(name, 2, " " + pack(arg0) + " " + pack(arg1))

public function logEvent(string name, string arg0, string arg1, string arg2)
  logEvent(name, 3, " " + pack(arg0) + " " + pack(arg1) + " " + pack(arg2))

/**Emits meta-data which parsers will ignore unless they are customized to understand it*/
public function logCustom(string unique_identifier, string data)
  emit("custom " + pack(unique_identifier) + " " + pack(data))

///////////////////////////////////////////////////////////////
/// Initialization
///////////////////////////////////////////////////////////////

/**Emits initialization data*/
function init2()
  initialized = true
    
  emit("init version " + I2S(MINIMUM_PARSER_VERSION) + " " + I2S(CURRENT_VERSION))

  for i = 0 to 23
    if GetPlayerController(Player(i)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING
      emit("init pid " + I2S(i) + " " + pack(GetPlayerName(Player(i))))

  doPeriodically(0.37, cb -> tick())

///Places init2 on a timer, initializes game cache, and translates constants*/
init
  nullTimer(() -> init2())

  goals[GOAL_NONE] = "none"
  goals[GOAL_HIGH] = "high"
  goals[GOAL_LOW] = "low"
  
  types[TYPE_INT] = "int"
  types[TYPE_REAL] = "real"
  types[TYPE_STRING] = "string"

  suggestions[SUGGEST_NONE] = "none"
  suggestions[SUGGEST_TRACK] = "track"
  suggestions[SUGGEST_LEADERBOARD] = "leaderboard"

  ops[OP_ADD] = "+="
  ops[OP_SUB] = "-="
  ops[OP_SET] = "="

  flags[FLAG_DRAWER] = "drawer"
  flags[FLAG_LOSER] = "loser"
  flags[FLAG_WINNER] = "winner"
  flags[FLAG_LEAVER] = "leaver"
  flags[FLAG_PRACTICING] = "practicing"

  FlushGameCache(InitGameCache(FILENAME))
  gc = InitGameCache(FILENAME)
  TimerStart(clock, 999999999, false, null)
  prepC2I()